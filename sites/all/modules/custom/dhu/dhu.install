<?php

/**
 * @file
 * Install, update and uninstall functions for the Drupal.hu module.
 */

/**
 * Implements hook_update_N().
 *
 * Disable modules: geocode.
 */
function dhu_update_7101(&$sandbox) {
  $messages = array();

  $modules_to_disable = array('geocode');
  module_disable($modules_to_disable);
  $messages[] = t('Disable modules: @modules.', array(
      '@modules' => implode(', ', $modules_to_disable),
  ));

  return implode('<br />', $messages);
}

/**
 * Implements hook_update_N().
 */
function dhu_update_7102(&$sandbox) {
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('filename', 'profiles/standard/standard.profile')
    ->execute();

  return t('Issue #1170360 - Undefined index: distribution_name in drupal_install_profile_distribution_name()');
}

/**
 * Enable the Proj4JS and Drupal.hu common modules.
 */
function dhu_update_7103() {
  return _dhu_update_module_enable(array('proj4js', 'drupalhu_common'));
}

/**
 * Disable the Bartik theme.
 */
function dhu_update_7104() {
  $theme_list = array('bartik');
  theme_disable($theme_list);

  return format_plural(
    count($theme_list),
    'The following theme was disabled successful: @themes.',
    'The following themes was disabled successful: @themes.',
    array('@themes' => implode(', ', $theme_list))
  );
}

/**
 * Uninstall Feed API.
 *
 * @see https://github.com/drupalhu/drupal.hu/issues/76
 */
function dhu_update_7105() {
  $tables_to_drop = array(
    'feedapi',
    'feedapi_stat',
    'feedapi_node_item',
    'feedapi_node_item_feed',
    'parser_common_syndication',
  );

  foreach ($tables_to_drop as $table) {
    if (db_table_exists($table)) {
      db_drop_table($table);
    }
  }

  // Delete variables site-wide
  variable_del('feedapi_allowed_html_tags');
  variable_del('feedapi_allow_html_all');
  variable_del('feedapi_cron_percentage');

  // Delete variables per-content-type
  $types = db_query('SELECT * FROM {node_type}')->fetchAllAssoc('type', PDO::FETCH_OBJ);
  foreach ($types as $type => $data) {
    variable_del('feedapi_' . $type);
    variable_del('feedapi_settings_' . $type);
  }

  // Empty parser common syndication cache directory.
  $cache_dir = variable_get('parser_common_syndication_cache', FALSE);
  if (is_dir($cache_dir)) {
    $dp = opendir($cache_dir);
    while (($file = readdir($dp)) !== FALSE) {
      if (is_file($file)) {
        unlink($cache_dir . '/' . $file);
      }
    }
    closedir($dp);
    rmdir($cache_dir);
  }
  variable_del('parser_common_syndication_cache');

  // Empty parser simplepie cache directory.
  $cache_dir = variable_get('parser_simplepie_cache', FALSE);
  if (is_dir($cache_dir)) {
    $dp = opendir($cache_dir);
    while (($file = readdir($dp)) !== FALSE) {
      if (is_file($file)) {
        unlink($cache_dir . '/' . $file);
      }
    }
    closedir($dp);
    rmdir($cache_dir);
  }
  variable_del('parser_simplepie_cache');

  // Empty global variables.
  variable_del('feedapi_settings_feed');
  menu_rebuild();
}

/**
 * Enables or installs a given list of modules.
 *
 * @param string[] $module_list
 *   Array of module names.
 *
 * @return string
 *   Status message.
 */
function _dhu_update_module_enable(array $module_list) {
  if (empty($module_list)) {
    return '';
  }

  $args = array(
    '@modules' => implode(', ', $module_list),
  );

  if (module_enable($module_list)) {
    return format_plural(
      count($module_list),
      'The following module was enabled successful: @modules.',
      'The following modules was enabled successful: @modules.',
      $args
    );
  }
  else {
    return format_plural(
      count($module_list),
      'An error occurred during enabling of the following module: @modules.',
      'An error occurred during enabling of the following modules: @modules.',
      $args
    );
  }
}

/**
 * "Remove unneeded tables
 *
 * @see https:github.com/drupalhu/drupal.hu/issues75
 */
function dhu_update_7106() {
  $tables_to_drop = array(
    'access',
    'cache_content',
    'backup_migrate_destinations',
    'backup_migrate_profiles',
    'backup_migrate_schedules',
    'client',
    'client_system',
    'comment_cck_revisions',
    'content_field_assigned',
    'content_field_technique',
    'content_group',
    'content_group_fields',
    'content_node_field',
    'content_node_field_instance',
    'content_type_issue',
    'content_type_link',
    'content_type_news',
    'content_type_poll',
    'd6_upgrade_filter',
    'field_data_field_book_audience',
    'field_data_field_book_level',
    'field_data_field_clicks',
    'field_data_field_location',
    'field_data_field_priority',
    'field_data_field_slide_headline',
    'field_data_field_slide_image',
    'field_data_field_slide_link',
    'field_data_field_technique',
    'field_revision_field_book_audience',
    'field_revision_field_book_level',
    'field_revision_field_clicks',
    'field_revision_field_location',
    'field_revision_field_priority',
    'field_revision_field_slide_headline',
    'field_revision_field_slide_image',
    'field_revision_field_slide_link',
    'field_revision_field_technique',
    'files',
    'moderation_filters',
    'moderation_roles',
    'moderation_votes',
    'node_type_content',
    'old_revisions',
    'opengraph_meta',
    'parser_common_syndication',
    'search_api_facet',
    'search_api_page',
    'search_api_sort',
    'search_dataset',
    'search_index',
    'search_node_links',
    'search_total',
    'taxonomy_manager_merge',
    'taxonomy_term_relation',
    'taxonomy_term_synonym',
    'views_object_cache',
    'weblink',
    'content_field_assigned',
    'field_data_field_assigned',
    'field_revision_field_assigned',
  );
  $fails = array();
  foreach ($tables_to_drop as $table) {
    if (db_table_exists($table)) {
      if (!db_drop_table($table)) {
        $fails[] = $table;
      }
    }
  }

  db_delete('field_config_instance')
    ->condition('field_name', 'field_assigned')
    ->execute();

  db_delete('field_config')
    ->condition('field_name', 'field_assigned')
    ->execute();

  return t("Not deleted: " . join(', ', $fails));
}
